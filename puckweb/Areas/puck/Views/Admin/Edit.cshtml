@model puck.core.Models.Admin.PuckUserViewModel
@{
    Layout = null;    
}
<div class="user_edit settings">
    @using (Html.BeginForm("edit", "admin", new { edit = (!string.IsNullOrEmpty(Model.UserName)).ToString() }, FormMethod.Post,null,new {autocomplete="off" }))
    {
        @Html.ValidationSummary(true)

    <fieldset>
        <legend>Puck User</legend>

        <div class="fieldwrapper">
            @Html.LabelFor(x => x.UserName)
            @Html.TextBoxFor(x => x.UserName)
        </div>

        @Html.HiddenFor(x => x.CurrentEmail)
        <div class="fieldwrapper">
            @Html.LabelFor(x => x.Email)
            @Html.TextBoxFor(x => x.Email)
        </div>

        <div class="fieldwrapper">
            @Html.LabelFor(x => x.FirstName)
            @Html.TextBoxFor(x => x.FirstName)
        </div>

        <div class="fieldwrapper">
            @Html.LabelFor(x => x.Surname)
            @Html.TextBoxFor(x => x.Surname)
        </div>

        <div class="fieldwrapper">
            @Html.LabelFor(x => x.StartNodes)
            @Html.EditorFor(x => x.StartNodes)
        </div>

        <div class="fieldwrapper">
            @Html.LabelFor(x => x.Roles)
            <span class="description">Hold down Ctrl (on windows) or Command (on mac), to select multiple roles. Alternatively, click and drag if the roles you want are listed one after the other.</span>
            <br/>
            @Html.EditorFor(x => x.Roles)
        </div>

        <div class="fieldwrapper">
            @Html.LabelFor(x => x.UserVariant)
            @Html.EditorFor(x => x.UserVariant)
        </div>
        @if (string.IsNullOrEmpty(Model.UserName))
        {
            <div class="fieldwrapper">
                @Html.LabelFor(x => x.Password)
                @Html.TextBoxFor(x => x.Password, new { type = "password", autocomplete = "new-password" })
            </div>

            <div class="fieldwrapper">
                @Html.LabelFor(x => x.PasswordConfirm)
                @Html.EditorFor(x => x.PasswordConfirm)
            </div>
        }
        else
        {
            <div class="fieldwrapper">
                @Html.LabelFor(x => x.Password, "New Password")
                @Html.TextBoxFor(x => x.Password, new { type = "password", autocomplete = "new-password" })
            </div>

            <div class="fieldwrapper">
                @Html.LabelFor(x => x.PasswordConfirm, "Confirm New Password")
                @Html.EditorFor(x => x.PasswordConfirm)
            </div>

        }
    </fieldset>
        <div>
            <button class="btn btn-link update">update</button>
        </div>
    }    
    <div class="msg">

    </div>
</div>